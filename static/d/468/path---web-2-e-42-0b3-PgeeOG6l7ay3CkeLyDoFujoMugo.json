{"data":{"markdownRemark":{"frontmatter":{"title":"Websocket Client 최적화 및 Server 구현에 대한 고민","date":"28 October 2019","path":"/web/2","author":null,"excerpt":null,"tags":null,"coverImage":null},"id":"b46225f4-42f4-5491-b827-566f50a1a496","html":"<p>현재 진행하고 있는 프로젝트가 암호화폐 거래소다 보니 웹 브라우저에서 주문 상황, 토큰 가격 등 실시간으로 보여줄 수 있어야 합니다.</p>\n<p>즉, 클라이언트에서 어떠한 요청 없이 특정 시점마다 서버로부터 데이터를 받아와야 하기 때문에, 당연하게도 양방향 통신을 하는 websocket을 써야만 했습니다.</p>\n<p>클라이언트에서 WebSocket 서버와 연결된 뒤, Orderbook, Trade, Ticker 등의 메시지를 요청하면, 해당 Socket을 닫기 전까지는 요청한 데이터들을 계속 받을 수 있습니다.</p>\n<p>예를 들어, 클라이언트가 ETH-KRW Orderbook을 요청하면 ETH-KRW 주문이 발생할 때마다, ETH-KRW Trade와 Ticker를 요청하면 ETH-KRW 거래가 체결될 때마다 데이터를 받습니다.\n따라서, 웹소켓 서버에서 연결된 클라이언트들 정보를 유지하고 있어야 하고, websocket 라이브러리에는 socket.io의 room과 같은 기능이 없기 때문에 이러한 기능을 직접 구현하였습니다.</p>\n<h2>고민거리</h2>\n<ol>\n<li>\n<p>클라이언트에서 서버랑 소켓 연결한 뒤 메세지 보내고 가만히 있으면 계속 메세지를 수신하는데, 그렇다는 건 서버에서 메세지 내려주는 시기를 정해야 된다는 것. 그렇다면, 그 시기를 어떻게 잡을까?</p>\n<p><strong><em>→ 웹소켓 서버가 레디스를 섭스크라이브하고 있어서 데몬이 그 레디스에 퍼블리쉬 할 때, 웹소켓 서버는 레디스 채널에 퍼블리쉬 된 정보가 어떤 종류(ticket, orderbook, trade)고 어떤 마켓(btcusd 등)인지 판단해서 해당하는 메세지 요청했던 클라이언트한테 전부 해당 메세지를 보내줘야 된다고 판단함.</em></strong></p>\n</li>\n<li>\n<p>그 메세지를 요청한 클라이언트들 파악은 어떻게?</p>\n<p><strong><em>→ 클라이언트에서 서버와 소켓 커넥팅 한 뒤, 메세지를 요청하면 어떤 클라이언트가 어떤 메세지들을 요청했는지 리스트에 추가하여 상태(리스트) 유지. (리스트는 크게 두가지로 구성함. 레디스 채널명을 key로 하고 클라이언트(ip, socket)를 value로 하는 Map 하나랑, 클라이언트(ip, socket)를 key로 하고 해당 클라가 요청한 메시지들을 value로 하는 Map 하나.)</em></strong></p>\n</li>\n<li>\n<p>데몬들이 redis에 publish 했을 때, 웹소켓 서버가 subscribe하려면 레디스 채널들 전부 subscribe하고 있어햐 됨. 지금은 서버 시작할 때, 미리 정의 해놓은 배열(socket type이랑 market) 돌면서 모든 채널들에 대해서 subscribe를 전부 실행시킴. 근데 이렇게 되면 새로운 코인 상장할 때 서버를 껐다 켜야되는 문제가 있음.</p>\n<p><strong><em>→ 채널들 리프레쉬 시키는 api 하나 구현해서 관리자가 상장할때 웹소켓 서버에 이 api 호출 시켜야 하나..? socket type이랑 market들을 상수가 아니라 디비에 넣어놓고..? 일단 구현하지 않고 MR 보내논 상태.</em></strong></p>\n</li>\n</ol>","excerpt":"…"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"type":"posts","next":{"frontmatter":{"path":"/react/1","title":"Hooks와 함께 MobX 사용하기","tags":null},"fileAbsolutePath":"/Users/soopark/Documents/dev/github-blog/src/posts/react/Hooks와 함께 MobX 사용하기/index.md"},"previous":{"frontmatter":{"path":"/web/2","title":"인증 시스템에 대한 고민","tags":null},"fileAbsolutePath":"/Users/soopark/Documents/dev/github-blog/src/posts/web/인증 시스템에 대한 고민/index.md"}}}