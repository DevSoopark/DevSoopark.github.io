{"version":3,"sources":["webpack:///./src/templates/tags.js","webpack:///./src/components/tagList.js"],"names":["__webpack_require__","r","__webpack_exports__","d","postsQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","_components_seo__WEBPACK_IMPORTED_MODULE_2__","_components_layout__WEBPACK_IMPORTED_MODULE_3__","_components_post__WEBPACK_IMPORTED_MODULE_4__","_components_navigation__WEBPACK_IMPORTED_MODULE_5__","_components_tagList__WEBPACK_IMPORTED_MODULE_7__","Tags","_ref","data","_ref$pageContext","pageContext","nextPagePath","previousPagePath","tag","tagInfos","posts","allMarkdownRemark","edges","a","createElement","Fragment","className","map","_ref2","node","id","autoExcerpt","excerpt","_node$frontmatter","frontmatter","title","date","path","author","coverImage","tags","key","previousPath","previousLabel","nextPath","nextLabel","propTypes","PropTypes","object","isRequired","shape","string","gatsby__WEBPACK_IMPORTED_MODULE_2__","_helpers__WEBPACK_IMPORTED_MODULE_3__","_styles_tag_module_css__WEBPACK_IMPORTED_MODULE_4__","_styles_tag_module_css__WEBPACK_IMPORTED_MODULE_4___default","TagList","style","container","tagInfo","to","toKebabCase","fieldValue","totalCount","arrayOf"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,+BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,GAAAS,EAAAT,EAAAO,EAAAC,GAAAE,EAAAV,EAAA,KAAAW,EAAAX,EAAA,KAAAY,EAAAZ,EAAA,KAAAa,EAAAb,EAAA,KAAAc,GAAAd,EAAA,KAAAA,EAAA,MAWMe,EAAO,SAAAC,GAGP,IAFJC,EAEID,EAFJC,KAEIC,EAAAF,EADJG,YAAeC,EACXF,EADWE,aAAcC,EACzBH,EADyBG,iBAAkBC,EAC3CJ,EAD2CI,IAAKC,EAChDL,EADgDK,SAGtBC,EAC1BP,EADFQ,kBAAqBC,MAGvB,OACEpB,EAAAqB,EAAAC,cAAAtB,EAAAqB,EAAAE,SAAA,KACEvB,EAAAqB,EAAAC,cAAClB,EAAA,EAAD,MACAJ,EAAAqB,EAAAC,cAACjB,EAAA,EAAD,KACEL,EAAAqB,EAAAC,cAACd,EAAA,EAAD,CAASS,SAAUA,IACnBjB,EAAAqB,EAAAC,cAAA,OAAKE,UAAU,cAAf,mBACkBxB,EAAAqB,EAAAC,cAAA,gBAAQN,IAGzBE,EAAMO,IAAI,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KAEVC,EAWED,EAXFC,GACSC,EAUPF,EAVFG,QAHqBC,EAanBJ,EATFK,YACEC,EALmBF,EAKnBE,MACAC,EANmBH,EAMnBG,KACAC,EAPmBJ,EAOnBI,KACAC,EARmBL,EAQnBK,OACAC,EATmBN,EASnBM,WACAP,EAVmBC,EAUnBD,QACAQ,EAXmBP,EAWnBO,KAIJ,OACEtC,EAAAqB,EAAAC,cAAChB,EAAA,EAAD,CACEiC,IAAKX,EACLK,MAAOA,EACPC,KAAMA,EACNC,KAAMA,EACNC,OAAQA,EACRE,KAAMA,EACND,WAAYA,EACZP,QAASA,GAAWD,MAK1B7B,EAAAqB,EAAAC,cAACf,EAAA,EAAD,CACEiC,aAAczB,EACd0B,cAAc,cACdC,SAAU5B,EACV6B,UAAU,mBAOpBlC,EAAKmC,UAAY,CACfjC,KAAMkC,IAAUC,OAAOC,WACvBlC,YAAagC,IAAUG,MAAM,CAC3BlC,aAAc+B,IAAUI,OACxBlC,iBAAkB8B,IAAUI,UAIzB,IAAMnD,EAAU,YAiCRW,8CC7Gf,IAAAV,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,GAAAS,EAAAT,EAAAO,EAAAC,GAAAgD,EAAAxD,EAAA,KAAAyD,EAAAzD,EAAA,KAAA0D,EAAA1D,EAAA,KAAA2D,EAAA3D,EAAAO,EAAAmD,GAQME,EAAU,SAAA5C,GAAkB,IAAfO,EAAeP,EAAfO,SACjB,OACEjB,EAAAqB,EAAAC,cAAA,OAAKE,UAAW+B,IAAMC,WACpBxD,EAAAqB,EAAAC,cAAA,OAAKE,UAAW+B,IAAMjB,MACnBrB,GACCA,EAASQ,IAAI,SAAAgC,GAAO,OAClBzD,EAAAqB,EAAAC,cAAC4B,EAAA,EAAD,CACE1B,UAAW+B,IAAMvC,IACjB0C,GAAE,aAAeC,sBAAYF,EAAQG,YAAnC,IACFrB,IAAKoB,sBAAYF,EAAQG,aAEzB5D,EAAAqB,EAAAC,cAAA,gBACImC,EAAQG,WADZ,KAC0BH,EAAQI,WADlC,WAUdP,EAAQV,UAAY,CAClB3B,SAAU4B,IAAUiB,QAAQjB,IAAUC,QAAQC,YAGjCO","file":"component---src-templates-tags-js-f453ffce41489672a339.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\nimport SEO from '../components/seo';\nimport Layout from '../components/layout';\nimport Post from '../components/post';\nimport Navigation from '../components/navigation';\n\nimport '../styles/layout.css';\nimport TagList from '../components/tagList';\n\nconst Tags = ({\n  data,\n  pageContext: { nextPagePath, previousPagePath, tag, tagInfos },\n}) => {\n  const {\n    allMarkdownRemark: { edges: posts },\n  } = data;\n\n  return (\n    <>\n      <SEO />\n      <Layout>\n        <TagList tagInfos={tagInfos} />\n        <div className='infoBanner'>\n          Posts with tag: <span>#{tag}</span>\n        </div>\n\n        {posts.map(({ node }) => {\n          const {\n            id,\n            excerpt: autoExcerpt,\n            frontmatter: {\n              title,\n              date,\n              path,\n              author,\n              coverImage,\n              excerpt,\n              tags,\n            },\n          } = node;\n\n          return (\n            <Post\n              key={id}\n              title={title}\n              date={date}\n              path={path}\n              author={author}\n              tags={tags}\n              coverImage={coverImage}\n              excerpt={excerpt || autoExcerpt}\n            />\n          );\n        })}\n\n        <Navigation\n          previousPath={previousPagePath}\n          previousLabel='Newer posts'\n          nextPath={nextPagePath}\n          nextLabel='Older posts'\n        />\n      </Layout>\n    </>\n  );\n};\n\nTags.propTypes = {\n  data: PropTypes.object.isRequired,\n  pageContext: PropTypes.shape({\n    nextPagePath: PropTypes.string,\n    previousPagePath: PropTypes.string,\n  }),\n};\n\nexport const postsQuery = graphql`\n  query($limit: Int!, $skip: Int!, $tag: String!) {\n    allMarkdownRemark(\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          id\n          excerpt\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM YYYY\")\n            path\n            author\n            excerpt\n            tags\n            coverImage {\n              childImageSharp {\n                fluid(maxWidth: 800) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Tags;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport { toKebabCase } from '../helpers';\n\n// import style from '../styles/post.module.css';\nimport style from '../styles/tag.module.css';\n\nconst TagList = ({ tagInfos }) => {\n  return (\n    <div className={style.container}>\n      <div className={style.tags}>\n        {tagInfos &&\n          tagInfos.map(tagInfo => (\n            <Link\n              className={style.tag}\n              to={`/post/tag/${toKebabCase(tagInfo.fieldValue)}/`}\n              key={toKebabCase(tagInfo.fieldValue)}\n            >\n              <span>\n                #{tagInfo.fieldValue} ({tagInfo.totalCount})\n              </span>\n            </Link>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nTagList.propTypes = {\n  tagInfos: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default TagList;\n"],"sourceRoot":""}